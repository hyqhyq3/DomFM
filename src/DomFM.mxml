<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" nativeDragEnter="windowedapplication1_nativeDragEnterHandler(event)"
					   nativeDragDrop="windowedapplication1_nativeDragDropHandler(event)"
					   xmlns:s="library://ns.adobe.com/flex/spark" windowComplete="windowedapplication1_windowCompleteHandler(event)"
					   xmlns:mx="library://ns.adobe.com/flex/mx" showStatusBar="false" mouseDown="windowedapplication1_mouseDownHandler(event)"
					   width="420" height="185" backgroundColor="#CFCFCF" initialize="windowedapplication1_initializeHandler(event)">
	<fx:Style source="style.css"/>
	<fx:Script>
		<![CDATA[
			import com.domlib.domFM.action.CurlLoader;
			import com.domlib.domFM.action.HotKey;
			import com.domlib.domFM.action.ID3Parser;
			import com.domlib.domFM.action.Player;
			import com.domlib.domFM.action.QQMusic;
			import com.domlib.domFM.data.ID3Tag;
			import com.domlib.domFM.events.ID3Event;
			import com.domlib.domFM.events.PlayEvent;
			import com.domlib.domFM.utils.FileUtil;
			import com.domlib.domFM.utils.SQL;
			import com.domlib.domFM.utils.SharedObjectTool;
			import com.domlib.domFM.utils.StringUtil;
			
			import flash.utils.setTimeout;
			
			import mx.charts.AreaChart;
			import mx.events.AIREvent;
			import mx.events.FlexEvent;
			import mx.events.FlexNativeWindowBoundsEvent;
			import mx.managers.DragManager;
			import mx.rpc.http.HTTPService;
			
			private var hotKey:HotKey;
			/**
			 * id3解析器
			 */	
			private var id3Parser:ID3Parser;
			
			private var inSync:Boolean = false;

			private var dbVersion:uint = 1;
			
			private var dbName:String = "";
			
			private var syncServer:String = "";
			
			private var syncPassword:String = "";
			
			private var libPath:String = "";
			
			protected function windowedapplication1_initializeHandler(event:FlexEvent):void
			{
				playILike = SharedObjectTool.read(applicationID,"playILike");
				var result:Array = sql.execute("select ver from version where id=1");
				if(result.length>0)
					dbVersion = result[0].ver;
				var text:String = FileUtil.openAsString("config/config.xml");
				if(text)
				{
					var config:XML;
					try
					{
						config = new XML(text);
						dbName = String(config.db_name[0]);
						syncServer = String(config.sync_server[0]);
						syncPassword = String(config.password[0]);
						libPath = String(config.lib_path[0]);
						var file:File = File.applicationDirectory.resolvePath(libPath);
						if(!file.exists||!file.isDirectory)
							libPath = "library"+File.separator;
						else
							libPath = file.nativePath+File.separator;
					}
					catch(e:Error){}
				}
				if(syncServer)
				{
					var url:String = syncServer+"?password="+syncPassword+"&dbname="+dbName+
						"&type=getversion";
					var loader:URLLoader = new URLLoader();
					loader.addEventListener(Event.COMPLETE,onVersionComp);
					loader.addEventListener(IOErrorEvent.IO_ERROR,finishSync);
					loader.dataFormat = URLLoaderDataFormat.TEXT;
					loader.load(new URLRequest(getRandomUrl(url)));
					inSync = true;
					pauseMask.visible = true;
					continueLabel.text = "同步中 0%";
					
				}
				
				hotKey = new HotKey();
				hotKey.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);
				id3Parser = new ID3Parser();
				id3Parser.addEventListener(ID3Event.GET_ONE_INFO,onGetMusicInfo);
				id3Parser.addEventListener(ID3Event.ALL_COMPLETE,onMusicInfoComp);
				this.nativeApplication.addEventListener(Event.EXITING,onExiting);
			}
			
			private var serverVersion:uint = 1;
			protected function onVersionComp(event:Event):void
			{
				var loader:URLLoader = event.target as URLLoader;
				serverVersion = uint(loader.data);
				if(serverVersion>dbVersion)
				{
					startDownloadDataBase();
				}
				else
				{
					finishSync();
				}
			}
			
			private function startDownloadDataBase():void
			{
				var url:String = syncServer+"?password="+syncPassword+
					"&dbname="+dbName+"&type=download";
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE,onDbComp);
				loader.addEventListener(IOErrorEvent.IO_ERROR,finishSync);
				loader.addEventListener(ProgressEvent.PROGRESS,onProgress);
				loader.dataFormat = URLLoaderDataFormat.BINARY;
				loader.load(new URLRequest(getRandomUrl(url)));
			}
			
			private function getRandomUrl(url:String):String
			{
				if(url.indexOf("?")!=-1)
				{
					return url += "&r="+Math.random();
				}
				return url += "?r="+Math.random();
			}
			
			protected function onProgress(event:ProgressEvent):void
			{
				continueLabel.text = "同步中 "+int(event.bytesLoaded*100/event.bytesTotal)+"%";
			}
			
			protected function onDbComp(event:Event):void
			{
				var loader:URLLoader = event.target as URLLoader;
				var bytes:ByteArray = loader.data;
				if(bytes.length>1)
				{
					dbVersion = serverVersion;
					bytes.position = 0;
					bytes.uncompress(CompressionAlgorithm.LZMA);
					if(sql)
					{
						sql.close();
					}
					FileUtil.save("music.db",bytes);
					sql = new SQL("music.db");
				}
				finishSync();
			}
			
			private function finishSync(event:Event=null):void
			{
				inSync = false;
				continueLabel.text = "继续收听";
				pauseMask.visible = false;
				playNext();
			}
			
			
			/**
			 * 应用程序退出
			 */	
			protected function onExiting(event:Event):void
			{
				if(hotKey)
				{
					hotKey.exit();
				}
				if(player)
				{
					player.exit();
				}
				if(id3Parser)
					id3Parser.exit();
				if(syncServer&&sql.isChanged)
				{
					event.preventDefault();
					sendData();
				}
			}
			
			private function sendData():void
			{
				var bytes:ByteArray = FileUtil.openAsByteArray("music.db");
				dbVersion++;
				sql.execute("update version set ver = '"+dbVersion+"' where id=1;");
				if(bytes)
				{
					bytes.compress(CompressionAlgorithm.LZMA);
					FileUtil.save(dbName+".zip",bytes);
					var url:String = syncServer+"?password="+syncPassword+"&dbname="+dbName+
						"&type=upload"+"&version="+dbVersion;
					var file:File = File.applicationDirectory.resolvePath(dbName+".zip");
					file.addEventListener(Event.COMPLETE,onUploadComp);
					file.addEventListener(IOErrorEvent.IO_ERROR,onUploadComp);
					url = getRandomUrl(url);
					file.upload(new URLRequest(url));
				}
			}
			
			protected function onUploadComp(event:Event):void
			{
				FileUtil.deletePath(dbName+".zip");
				nativeApplication.exit();
			}
			
			private var qqMusic:QQMusic = new QQMusic;
			
			private var player:Player;
			
			private var currentSong:Object;
			
			private var isPlaying:Boolean = true;
			/**
			 * 播放下一首
			 */	
			private function playNext():void
			{
				if(inSync)
					return;
				if(!player)
				{
					player = new Player();
					player.addEventListener(PlayEvent.PLAY_COMPLETE,onPlayComp);
					player.addEventListener(PlayEvent.PLAY_PROGRESS,onPlayProgress);
					player.addEventListener(PlayEvent.PLAY_ERROR,onPlayError);
					player.addEventListener(PlayEvent.LOAD_COMPLETE,onBytesLoadComp);
				}
				var song:Object = getSongByRandom();
				if(song&&song.id)
				{
					currentSong = song;
					var url:String = getPortableUrl(song.url);
					if(!url)
					{
						if(song.qqid&&song.qqid!="0")
						{
							playByQQId(song.qqid);
						}
						else
						{
							qqMusic.searchSong(song.artist,song.title,onSearchSongComp,currentSong);
						}
					}
					else
					{
						player.playSong(url);
						updateAfterPlaySong();
					}
				}
				else
				{
					isPlaying = false;
				}
			}
			
			private function onBytesLoadComp(event:PlayEvent):void
			{
				if(!currentSong||!event.bytes||event.bytes.length<1048576)
					return;
				var path:String = getSongPath(currentSong);
				if(!path)
					return;
				FileUtil.save(path,event.bytes);
			}
			
			private function onSearchSongComp(songList:Array,arg:Object):void
			{
				if(arg!=currentSong)
					return;
				if(songList.length==0)
				{
					playNext();
					return;
				}
				var song:Object = songList[0];
				var qqid:String = song.id+song.location;
				currentSong.qqid = qqid;
				currentSong.length = int(song.length)*1000;
				sql.execute("update song set qqid = '"+qqid+"' where id='"+currentSong.id+"';");
				playByQQId(qqid);
			}
			
			private function playByQQId(qqid:String):void
			{
				if(!qqid)
					return;
				var url:String = getSongPath(currentSong);
				var file:File = File.applicationDirectory.resolvePath(url);
				if(!file.exists)
					url = qqMusic.getSongUrl(qqid.substring(0,qqid.length-1),qqid.substring(qqid.length-1));
				player.playSong(url);
				updateAfterPlaySong();
			}
			
			private function updateAfterPlaySong():void
			{
				isPlaying = true;
				countAdded = false;
				var file:File = File.applicationDirectory.resolvePath(getCoverPath(currentSong));
				if(file.exists)
				{
					cover.source = file.nativePath;
				}
				else
				{
					qqMusic.searchCover(currentSong.artist,currentSong.album,onCoverUrlComp,currentSong);
					cover.source = null;
				}
				favorBtn.selected = (currentSong.favor=="1");
				titleLabel.text = currentSong.title+" - "+currentSong.artist;
				title = currentSong.title+" - DomFM";
				if(favorBtn.selected)
					title = "❤"+title;
				timeLabel.text = " 00:00";
			}
			
			private var curlLoader:CurlLoader;
			
			private function onCoverUrlComp(url:String,arg:Object):void
			{
				if(arg!=currentSong)
					return;
				if(url)
				{
					if(!curlLoader)
					{
						curlLoader = new CurlLoader();
					}
					curlLoader.addEventListener(Event.COMPLETE,onCoverLoaded);
					curlLoader.arg =  currentSong;
					curlLoader.load(url);
				}
				else
				{
					var file:File = File.applicationDirectory.resolvePath(getArsitPath(currentSong));
					if(file.exists)
					{
						cover.source = file.nativePath;
					}
					else
					{
						qqMusic.searchArtist(currentSong.artist,onArtistUrlComp,currentSong);
						cover.source = null;
					}
				}
			}
			
			private function onCoverLoaded(event:Event):void
			{
				curlLoader.removeEventListener(Event.COMPLETE,onCoverLoaded);
				if(curlLoader.loadedBytes.length>1024)
				{
					var path:String = getCoverPath(curlLoader.arg);
					FileUtil.save(path,curlLoader.loadedBytes);
					if(curlLoader.arg==currentSong)
						cover.source = path;
				}
			}
			
			private function onArtistUrlComp(url:String,arg:Object):void
			{
				if(arg!=currentSong)
					return;
				if(url)
				{
					if(!curlLoader)
					{
						curlLoader = new CurlLoader();
					}
					curlLoader.addEventListener(Event.COMPLETE,onArtistLoaded);
					curlLoader.arg =  currentSong;
					curlLoader.load(url);
				}
			}
			
			private function onArtistLoaded(event:Event):void
			{
				curlLoader.removeEventListener(Event.COMPLETE,onArtistLoaded);
				if(curlLoader.loadedBytes.length>1024)
				{
					var path:String = getArsitPath(curlLoader.arg);
					FileUtil.save(path,curlLoader.loadedBytes);
					if(curlLoader.arg==currentSong)
						cover.source = path;
				}
			}
			
			private function getArsitPath(song:Object):String
			{
				return libPath+"artists\\"+FileUtil.escape(song.artist+".jpg");
			}
			
			private function getCoverPath(song:Object):String
			{
				var path:String = "";
				if(song.artist)
					path += song.artist;
				if(song.album)
					path += " - "+song.album;
				path = libPath+"covers\\"+FileUtil.escape(path+".jpg");
				return path;
			}
			
			private function getSongPath(song:Object):String
			{
				if(!song.qqid)
					return "";
				return libPath+"musics\\"+song.qqid+".mp3";
			}
			
			private var driverLetters:Array = ["C","D","E","F","G","H","I","J","K","L"];
			
			private function getPortableUrl(url:String):String
			{
				if(!url)
					return "";
				try
				{
					if(new File(url).exists)
						return url;
				}
				catch(e:Error){}
				
				url = url.substring(1);
				for each(var letter:String in driverLetters)
				{
					if(new File(letter+url).exists)
						return letter+url;
				}
				return "";
			}
			
			private var excludeIds:Array = [];
			
			private function getNotInStr():String
			{
				if(excludeIds.length==0)
					return "";
				
				var result:Array;
				if(playILike)
					result = sql.execute("select * from song where favor=1;");
				else
					result = sql.execute("select * from song where favor<>-1;");
				var length:int = 0;
				if(result)
					length = result.length-3;
				length = Math.min(length,20);
				while(excludeIds.length>length)
					excludeIds.shift();
				return " id not in ("+excludeIds.join(",")+")";
			}
			/**
			 * 获取一条音乐记录
			 */	
			private function getSongByRandom():Object
			{
				var result:Array;
				var excludeStr:String = getNotInStr();
				var query:String = "";
				if(playILike)
				{
					query = "select  Min(count) as count From  song where favor=1";
					if(excludeStr)
						query += " and"+excludeStr;
				}
				else
				{
					query= "select  Min(count) as count From  song";
					if(excludeStr)
						query += " where"+excludeStr;
				}
				result= sql.execute(query+";");
				var minCount:Number = Number(result[0].count);
				if(playILike)
					query = "select * from song where favor=1";
				else
					query = "select * from song where count="+minCount+" and favor<>-1";
				if(excludeStr)
					query += " and"+excludeStr;
				query += " order by random() limit 1";
				result= sql.execute(query+";");
				if(result)
					return result[0];
				return null;
			}
			
			private var countAdded:Boolean = false;
			/**
			 * 播放进度
			 */	
			private function onPlayProgress(event:PlayEvent):void
			{
				if(!countAdded&&event.playedTime>60000)
				{
					sql.execute("update song set count = count+1 where url='"+SQL.escape(event.url)+"';");
					countAdded = true;
				}
				var totalTime:Number;
				if(currentSong.length)
					totalTime = currentSong.length;
				else
					totalTime = event.totalTime;
				timeLabel.text = StringUtil.toTimeString(event.playedTime-totalTime);
			}
			/**
			 * 一首歌播放完成
			 */	
			private function onPlayComp(event:PlayEvent):void
			{
				if(!countAdded)
				{
					sql.execute("update song set count = count+1 where url='"+SQL.escape(event.url)+"';");
					countAdded = true;
				}
				playNext();
			}
			/**
			 * 一首歌播放失败
			 */	
			private function onPlayError(event:PlayEvent):void
			{
				playNext();
			}
			/**
			 * 跳过按钮点击
			 */	
			protected function skipBT_clickHandler(event:MouseEvent=null):void
			{
				if(currentSong&&currentSong.id)
				{
					sql.execute("update song set skip = skip+1 where url='"+SQL.escape(currentSong.url)+"';");
					if(excludeIds.indexOf(currentSong.id)==-1)
						excludeIds.push(currentSong.id);
				}
				playNext();
			}
			
			/**
			 * 拖拽文件进入
			 */
			private function windowedapplication1_nativeDragEnterHandler(event:NativeDragEvent):void
			{
				if(event.relatedObject==this)
					return;
				if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{       
					if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
						DragManager.acceptDragDrop(this);    
				}
			}
			/**
			 * 拖拽文件放下
			 */
			private function windowedapplication1_nativeDragDropHandler(event:NativeDragEvent):void
			{
				if(inSync)
					return;
				var arr:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				var list:Array = [];
				for each(var file:File in arr)
				{
					if(file.isDirectory)
					{
						list = list.concat(FileUtil.search(file.nativePath,null,filterFunc));
					}
					else if(filterFunc(file))
					{
						list.push(file);
					}
				}
				addFiles(list);
			}
			/**
			 * 添加按钮点击
			 */	
			protected function addBtn_clickHandler(event:Event):void
			{
				if(inSync)
					return;
				FileUtil.browseForOpen(function(file:File):void{
					var list:Array = FileUtil.search(file.nativePath,null,filterFunc);
					addFiles(list);
				},3);
			}
			
			private function addFiles(list:Array):void
			{
				var urlList:Array = [];
				var songList:Array = [];
				var result:Array = sql.execute("select url from song");
				for each(var song:Object in result)
				{
					songList.push(song.url.substr(3));
				}
				for each(var file:File in list)
				{
					var url:String = file.nativePath.substr(3);
					if(songList.indexOf(url)!=-1)
						continue;
					urlList.push(file.nativePath);
				}
				id3Parser.parse(urlList);
			}
			
			private var sql:SQL = new SQL("music.db");
			/**
			 * 插入一条音乐记录到数据库
			 */	
			private function onGetMusicInfo(event:ID3Event):void
			{
				var result:Array = sql.execute("select title from song where url='"+SQL.escape(event.url)+"'");
				if(result&&result.length>0)
					return;
				var id3:ID3Tag = event.tagInfo;
				if(!id3.title)
				{
					id3.title = FileUtil.getFileName(event.url);
				}
				var file:File = new File(event.url);
				var type:String = file.extension;
				sql.execute("insert into song (title,artist,album,url,qqid,favor,count,skip) values('"+
					SQL.escape(id3.title)+"','"+SQL.escape(id3.artist)+"','"+SQL.escape(id3.album)+"','"+
					SQL.escape(event.url)+"',0,0,0,0);");
				if(!isPlaying)
					playNext();
				title = "正在导入："+file.name;
			}
			
			private function onMusicInfoComp(event:ID3Event):void
			{
				if(currentSong)
				{
					title = currentSong.title+" - DomFM";
				}
				else
				{
					title = "DomFM";
				}
			}
			
			/**
			 * 文件过滤回调函数
			 */	
			private function filterFunc(file:File):Boolean
			{
				if(file.isDirectory)
					return true;
				if(file.extension==null)
					return false;
				var extension:String = file.extension.toLowerCase();
				if(extension=="mp3"/*||extension=="m4a"||extension=="wma"*/)
					return true;
				return false;
			}
			
			protected function windowedapplication1_windowCompleteHandler(event:AIREvent):void
			{
				channelBtn.selected = playILike;
				channelLabel.text = playILike?"我喜欢的":"所有音乐";
				var windowX:Number = SharedObjectTool.read(applicationID,"windowX");
				var windowY:Number = SharedObjectTool.read(applicationID,"windowY");
				if(isNaN(windowX))
					windowX = (Capabilities.screenResolutionX - width)*0.5;
				if(isNaN(windowY))
					windowY = (Capabilities.screenResolutionY - height)*0.5;
				if(windowX+width>Capabilities.screenResolutionX)
					windowX = Capabilities.screenResolutionX-width;
				if(windowY+height>Capabilities.screenResolutionY)
					windowY = Capabilities.screenResolutionY-height;
				nativeWindow.x = windowX;
				nativeWindow.y = windowY;
				addEventListener(FlexNativeWindowBoundsEvent.WINDOW_MOVE,windowedapplication1_windowMoveHandler);
				var menu:NativeMenu = new NativeMenu();
				var menuItem:NativeMenuItem = new NativeMenuItem("添加音乐");
				menuItem.addEventListener(Event.SELECT,addBtn_clickHandler);
				menu.addItem(menuItem);
				menu.addItem(new NativeMenuItem("",true));
				menuItem = new NativeMenuItem("复制当前");
				menuItem.addEventListener(Event.SELECT,onCopyCurrent);
				menu.addItem(menuItem);
				menuItem = new NativeMenuItem("复制喜欢(100)");
				menuItem.addEventListener(Event.SELECT,onCopyAll);
				menu.addItem(menuItem);
				contextMenu = menu;
				if(!isPlaying)
					playNext();
			}
			
			protected function windowedapplication1_windowMoveHandler(event:FlexNativeWindowBoundsEvent):void
			{
				SharedObjectTool.write(applicationID,"windowX",nativeWindow.x);
				SharedObjectTool.write(applicationID,"windowY",nativeWindow.y);
			}
			
			protected function onKeyDown(event:KeyboardEvent):void
			{
				if(!initialized||inSync)
					return;
				timeLabel.text += event.keyCode+" ";
				if(event.ctrlKey&&event.altKey)
				{
					switch(event.keyCode)
					{
						case Keyboard.RIGHT:
							skipBT_clickHandler();
							break;
						case Keyboard.LEFT:
							favorBtn.selected = true;
							likeBT_changeHandler();
							break;
						case Keyboard.F11:
							channelBtn.selected = !channelBtn.selected;
							togglebutton1_changeHandler();
							break;
						case Keyboard.F12:
							banBT_clickHandler();
							break;
						case Keyboard.F5:
							pauseMask.visible = !pauseMask.visible;
							if(pauseMask.visible)
							{
								player.pause();
							}
							else
							{
								player.resume();
							}
							break;
					}
				}
			}
			
			private function likeBT_changeHandler(event:Event=null):void
			{
				var favor:String = favorBtn.selected?"1":"0";
				currentSong.favor = favor;
				title = currentSong.title+" - DomFM";
				if(favor=="1")
					title = "❤"+title;
				if(currentSong)
					sql.execute("update song set favor = "+favor+" where url='"+SQL.escape(currentSong.url)+"';");
			}
			
			protected function banBT_clickHandler(event:MouseEvent=null):void
			{
				if(currentSong)
					sql.execute("update song set favor = -1 where url='"+SQL.escape(currentSong.url)+"';");
				playNext();
			}
			
			
			
			protected function pauseMask_clickHandler(event:MouseEvent=null):void
			{
				pauseMask.visible = false;
				if(player)
				{
					player.resume();
				}
			}
			
			protected function group1_clickHandler(event:MouseEvent=null):void
			{
				if(inSync)
					return;
				pauseMask.visible = true;
				if(player)
				{
					player.pause();
				}
			}
			
			private var playILike:Boolean = false;
			
			protected function togglebutton1_changeHandler(event:Event=null):void
			{
				playILike = channelBtn.selected;
				channelLabel.text = playILike?"我喜欢的":"所有音乐";
				SharedObjectTool.write(applicationID,"playILike",playILike);
				playNext();
			}
			
			protected function pauseMask_rollOutHandler(event:MouseEvent):void
			{
				bgColor.color = 0x9c9c9c;
			}
			
			protected function pauseMask_rollOverHandler(event:MouseEvent):void
			{
				bgColor.color = 0x808080;
			}
			
			protected function cover_clickHandler(event:MouseEvent):void
			{
				var file:File;
				try
				{
					file = File.applicationDirectory.resolvePath(cover.source as String);
				}
				catch(e:Error)
				{
					return;
				}
				if(file.exists)
					file.openWithDefaultApplication();
			}
			
			
			protected function onCopyCurrent(event:Event):void
			{
				var file:File = getFileBySong(currentSong);
				if(file)
				{
					Clipboard.generalClipboard.clear();
					Clipboard.generalClipboard.setData(ClipboardFormats.FILE_LIST_FORMAT,[file]);
				}
			}
			
			protected function onCopyAll(event:Event):void
			{
				var result:Array = sql.execute("select * from song where favor=1 order by random() limit 100;");
				if(result)
				{
					var list:Array = [];
					for each(var song:Object in result)
					{
						var file:File = getFileBySong(song);
						if(file)
							list.push(file);
					}
					Clipboard.generalClipboard.clear();
					Clipboard.generalClipboard.setData(ClipboardFormats.FILE_LIST_FORMAT,list);
				}
			}
			
			private function getFileBySong(song:Object):File
			{
				if(!song||!song.id)
					return null;
				var url:String = getPortableUrl(song.url);
				if(!url)
				{
					url = getSongPath(currentSong);
					var file:File = File.applicationDirectory.resolvePath(url);
					if(!file.exists)
						return null;
				}
				return File.applicationDirectory.resolvePath(url);
			}
			
			protected function windowedapplication1_mouseDownHandler(event:MouseEvent):void
			{
				stage.addEventListener(MouseEvent.MOUSE_MOVE,onMouseMove);
				stage.addEventListener(MouseEvent.MOUSE_UP,onMouseUp);
				stage.addEventListener(Event.MOUSE_LEAVE,onMouseUp);
			}
			
			private function onMouseMove(event:MouseEvent):void
			{
				var file:File;
				var cb:Clipboard = new Clipboard();
				if(event.target==cover)
				{
					file = new File(cover.source as String);
					if(!file.exists)
						return;
					cb.setData(ClipboardFormats.FILE_LIST_FORMAT, [file]);
					var dragImage:BitmapData = new BitmapData(cover.width,cover.height);
					dragImage.draw(cover);
					
					NativeDragManager.doDrag(this,cb,dragImage,new Point(-cover.mouseX,-cover.mouseY));  
				}
				else
				{
					file = getFileBySong(currentSong);
					if(!file)
						return;
					cb.setData(ClipboardFormats.FILE_LIST_FORMAT, [file]);
					NativeDragManager.doDrag(this,cb);  
				}
				onMouseUp();
			}
			
			private function onMouseUp(event:Event=null):void
			{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,onMouseMove);
				stage.removeEventListener(MouseEvent.MOUSE_UP,onMouseUp);
				stage.removeEventListener(Event.MOUSE_LEAVE,onMouseUp);
			}
			
		]]>
			
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<s:BitmapImage x="32" y="30" width="120" height="120" source="@Embed('com/domlib/domFM/skins/assets/coverBg.png')"/>
	<s:Image mouseChildren="false" id="cover" smoothingQuality="high" smooth="true" toolTip="查看大图" useHandCursor="true" buttonMode="true" click="cover_clickHandler(event)" x="32" y="30" width="120" height="120" scaleMode="zoom"
			 skinClass="com.domlib.domFM.skins.ImageSkin"/>
	<s:Group x="180" y="55" width="215" height="45" toolTip="暂停" useHandCursor="true" buttonMode="true" click="group1_clickHandler(event)">
		<s:BitmapImage source="@Embed('com/domlib/domFM/skins/assets/bg.png')"/>
		<s:Label id="titleLabel" showTruncationTip="true" maxDisplayedLines="1" x="8" y="27" width="200" color="#666666" fontWeight="normal"/>
		<s:Label id="timeLabel" x="8" y="5" color="#666666" fontWeight="bold" text=" 00:00"/>
		<s:Label id="channelLabel" x="162" y="7" color="#FFFFFF" text="所有音乐"/>
	</s:Group>
	
	<s:ToggleButton useHandCursor="true" buttonMode="true" toolTip="我喜欢" id="favorBtn" x="254" y="123" width="40" height="40"
					change="likeBT_changeHandler(event)"
					skinClass="com.domlib.domFM.skins.FavorButtonSkin"/>
	<s:Button useHandCursor="true" buttonMode="true" toolTip="跳过" id="skipBT" x="356" y="123" width="40" height="40"
			  click="skipBT_clickHandler(event)" skinClass="com.domlib.domFM.skins.NextButtonSkin"/>
	<s:Button useHandCursor="true" buttonMode="true" id="banBT" toolTip="不再播放" x="305" y="123" width="40" height="40"
			  click="banBT_clickHandler(event)" skinClass="com.domlib.domFM.skins.BanButtonSkin"/>
	<s:ToggleButton id="channelBtn" toolTip="切换列表" useHandCursor="true" buttonMode="true" change="togglebutton1_changeHandler(event)" x="361" y="22" skinClass="com.domlib.domFM.skins.ChangeButtonSkin"/>
	<s:Group id="pauseMask" rollOut="pauseMask_rollOutHandler(event)" rollOver="pauseMask_rollOverHandler(event)" useHandCursor="true" mouseChildren="false" buttonMode="true" width="100%" height="100%" visible="false" click="pauseMask_clickHandler(event)">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" alpha="0.6"/>
			</s:fill>
		</s:Rect>
		<s:Rect width="100" height="35" radiusX="4" radiusY="4" horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:SolidColor id="bgColor" color="0x808080"/>
			</s:fill>
		</s:Rect>
		<s:Label id="continueLabel" color="#FFFFFF" horizontalCenter="0" text="继续收听" verticalCenter="1"/>
	</s:Group>
</s:WindowedApplication>
